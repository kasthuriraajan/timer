{"version":3,"sources":["Stopwatch.js","App.js","reportWebVitals.js","index.js"],"names":["Stopwatch","state","timerOn","timerStart","timerTime","startTimer","setState","Date","now","timer","setInterval","stopTimer","clearInterval","resetTimer","this","seconds","Math","floor","slice","className","onClick","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPA+DeA,E,4MA5DXC,MAAQ,CACJC,SAAS,EACTC,WAAY,EACZC,UAAW,G,EAGbC,WAAa,WACX,EAAKC,SAAS,CACZJ,SAAS,EACTE,UAAW,EAAKH,MAAMG,UACtBD,WAAYI,KAAKC,MAAQ,EAAKP,MAAMG,YAEtC,EAAKK,MAAQC,aAAY,WACvB,EAAKJ,SAAS,CACZF,UAAWG,KAAKC,MAAQ,EAAKP,MAAME,eAEpC,K,EAGLQ,UAAY,WACV,EAAKL,SAAS,CAAEJ,SAAS,IACzBU,cAAc,EAAKH,Q,EAErBI,WAAa,WACX,EAAKP,SAAS,CACZH,WAAY,EACZC,UAAW,K,4CAInB,WACE,IAAQA,EAAcU,KAAKb,MAAnBG,UAGJW,IAFgB,IAAOC,KAAKC,MAAMb,EAAY,IAAM,KAAMc,OAAO,GAEvDF,KAAKC,MAAMb,EAAY,OACtB,IAAOY,KAAKC,MAAMb,EAAY,KAAS,IAAKc,OAAO,IACrD,IAAMF,KAAKC,MAAMb,EAAY,OAAUc,OAAO,GAC3D,OACE,sBAAKC,UAAU,YAAf,UACE,qBAAKA,UAAU,mBAAf,uBACA,qBAAKA,UAAU,oBAAf,SAEKJ,KAEmB,IAAvBD,KAAKb,MAAMC,SAA8C,IAAzBY,KAAKb,MAAMG,WAC5C,wBAAQgB,QAASN,KAAKT,WAAtB,oBAEwB,IAAvBS,KAAKb,MAAMC,SACZ,wBAAQkB,QAASN,KAAKH,UAAtB,mBAEwB,IAAvBG,KAAKb,MAAMC,SAAqBY,KAAKb,MAAMG,UAAY,GACxD,wBAAQgB,QAASN,KAAKT,WAAtB,qBAEwB,IAAvBS,KAAKb,MAAMC,SAAqBY,KAAKb,MAAMG,UAAY,GACxD,wBAAQgB,QAASN,KAAKD,WAAtB,0B,GAvDgBQ,aCcTC,E,4JAZb,WACE,OACE,sBAAKH,UAAU,MAAf,UACE,qBAAKA,UAAU,YAAf,mBACA,qBAAKA,UAAU,SAAf,SACE,cAAC,EAAD,a,GANQE,aCSHE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1040eed1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nclass Stopwatch extends Component {\n    state = {\n        timerOn: false,\n        timerStart: 0,\n        timerTime: 0\n      };\n\n      startTimer = () => {\n        this.setState({\n          timerOn: true,\n          timerTime: this.state.timerTime,\n          timerStart: Date.now() - this.state.timerTime\n        });\n        this.timer = setInterval(() => {\n          this.setState({\n            timerTime: Date.now() - this.state.timerStart\n          });\n        }, 10);\n      };\n\n      stopTimer = () => {\n        this.setState({ timerOn: false });\n        clearInterval(this.timer);\n      };\n      resetTimer = () => {\n        this.setState({\n          timerStart: 0,\n          timerTime: 0\n        });\n      };\n\n  render() {\n    const { timerTime } = this.state;\n    let centiseconds = (\"0\" + (Math.floor(timerTime / 10) % 100)).slice(-2);\n    // let seconds = (\"0\" + (Math.floor(timerTime / 1000) % 60)).slice(-2);\n    let seconds = Math.floor(timerTime / 1000);\n    let minutes = (\"0\" + (Math.floor(timerTime / 60000) % 60)).slice(-2);\n    let hours = (\"0\" + Math.floor(timerTime / 3600000)).slice(-2);\n    return (\n      <div className=\"Stopwatch\">\n        <div className=\"Stopwatch-header\">Stopwatch</div>\n        <div className=\"Stopwatch-display\">\n            {/* {hours} : {minutes} : {seconds} : {centiseconds} */}\n            {seconds}\n        </div>\n        {this.state.timerOn === false && this.state.timerTime === 0 && (\n        <button onClick={this.startTimer}>Start</button>\n        )}\n        {this.state.timerOn === true && (\n        <button onClick={this.stopTimer}>Stop</button>\n        )}\n        {this.state.timerOn === false && this.state.timerTime > 0 && (\n        <button onClick={this.startTimer}>Resume</button>\n        )}\n        {this.state.timerOn === false && this.state.timerTime > 0 && (\n        <button onClick={this.resetTimer}>Reset</button>\n        )}\n      </div>\n    );\n  }\n}\nexport default Stopwatch;\n","import React, { Component } from \"react\";\nimport Stopwatch from \"./Stopwatch\";\n// import Countdown from \"./Countdown\";\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-title\">Timer</div>\n        <div className=\"Timers\">\n          <Stopwatch />\n          {/* <Countdown /> */}\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}